<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lodakai's corner]]></title>
  <link href="http://chrjoh.github.io/atom.xml" rel="self"/>
  <link href="http://chrjoh.github.io/"/>
  <updated>2014-05-25T09:57:24+02:00</updated>
  <id>http://chrjoh.github.io/</id>
  <author>
    <name><![CDATA[Christer Johansson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bind shell]]></title>
    <link href="http://chrjoh.github.io/blog/2014/05/25/bind-shell/"/>
    <updated>2014-05-25T09:47:42+02:00</updated>
    <id>http://chrjoh.github.io/blog/2014/05/25/bind-shell</id>
    <content type="html"><![CDATA[<h1>bindshell</h1>

<p>This is my second try, and now the goal is to write some code to setup a listening server for OSX 64-bit system. I started with creating the c code to do the job
to have someting to work from the code can be found <a href="https://github.com/chrjoh/shell_code/blob/master/bindshell/bindshell_template.c">here</a>
Will keep this post a bit short as much of the things to do are described in my previous post,
<a href="http://blog.lodakai.com/blog/2014/05/20/reverse-shell/">Reverse Shell</a>. Following the c code I cam up with this
<a href="https://github.com/chrjoh/shell_code/blob/master/bindshell/bindshell.s">assembler version</a>.
(Had some problem with the code, but @norsec0de and @TheColonial helped me to fix it, big thx to them for the help)</p>

<h4>bindshell, Usage:</h4>

<p>  bindshell start a listening server that you can connect to with the command: <code>nc -nv 127.0.0.1 4444</code> in another folder for example your home directory</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  nasm -g -f macho64 bindshell.s
</span><span class='line'>  ld  -arch x86_64 -macosx_version_min 10.7.0 -lSystem -o bindshell bindshell.o
</span><span class='line'>  ./bindshell</span></code></pre></td></tr></table></div></figure>


<p>
Go to the terminal and run <code>nc -nv 127.0.0.1 4444</code> then type ls, you should now see a directory listing of the directory you started
bindshell in.</p>

<p>The next step was to convert it to something that could be used as payload, i.e remove &ldquo;bad values&rdquo;, see the reverse shell post.
I ended up with this, not optomized with respect of length the result was
<a href="https://github.com/chrjoh/shell_code/blob/master/bindshell/bindshell_no_bad_values.s">bindshell_no_bad_values.s</a>.
Then I converted this to shell code values and tried the c code
<a href="https://github.com/chrjoh/shell_code/blob/master/bindshell/bindshell_test.c">bindshell_test.c</a> there was some problems could not
get the code to listen for incoming calls. To solve that I used the excellent command <code>dtruss ./bindshell_test</code> and by looking
at the output I found that my socket call got the wrong values this I fixed by adding the setuid call. Example of what <code>dtruss</code>
result in can be seen bellow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>.
</span><span class='line'>.
</span><span class='line'>getaudit_addr(0x7FFF554B7C90, 0x30, 0x0)   = 0 0
</span><span class='line'>csops(0x16821, 0x7, 0x7FFF554B7870)        = -1 Err#22
</span><span class='line'>setuid(0x0, 0x0, 0x7FFF554B89F0)           = 0 0
</span><span class='line'>socket(0x2, 0x1, 0x0)                      = 3 0
</span><span class='line'>bind(0x3, 0x7FFF554B89AC, 0x10)            = 0 0
</span><span class='line'>listen(0x3, 0x0, 0x0)                      = 0 0
</span><span class='line'>close(0x3)                                 = 0 0
</span><span class='line'>.
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>


<p>Then that was done the c code worded as expected. For simplicity I also include a Makefile to compile the various examples. To continue
my road into the shell code I bought
<a href="http://www.amazon.com/gp/product/B004P5O38Q/ref=oh_d__o00_details_o00__i00?ie=UTF8&amp;psc=1">The Shellcoder&rsquo;s Handbook: Discovering and Exploiting Security Holes</a>
Do not know if the next post will be something about wifi hacking or assembler the time will tell.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize kali linux]]></title>
    <link href="http://chrjoh.github.io/blog/2014/05/24/customize-kali-linux/"/>
    <updated>2014-05-24T17:39:39+02:00</updated>
    <id>http://chrjoh.github.io/blog/2014/05/24/customize-kali-linux</id>
    <content type="html"><![CDATA[<h3>A quick guide to setup kali linux with some extras.</h3>

<p>As I just got myself a ultrabook and wanted a linux
distribution to experiment with security setups and some development.
The installation is a normal <a href="http://www.kali.org/downloads/">kali linux</a>
 with customized tmux, ruby on rails develop envoronment.</p>

<p>Item that need to be instaled are:</p>

<ul>
<li>sublime (text editor)</li>
<li>Redis (fast key, value database)</li>
<li>nodejs (javascript runtime)</li>
</ul>


<h4>tmux</h4>

<p>change default b to a for easier keybinding, the tmux.conf can be found here
<a href="https://github.com/chrjoh/dotfiles/blob/master/kali_tmux.conf">tmux.conf</a></p>

<h4>git</h4>

<p>So we can have version controll, follow the instructions on github
<a href="https://help.github.com/articles/generating-ssh-keys">ssh key setup</a></p>

<h4>Sublime</h4>

<p>Download sublime2 <a href="http://www.sublimetext.com/2">here</a> or sublime2 <a href="http://www.sublimetext.com/3">here</a>
I choose sublime2, then extract the package with :
<code>tar xf Sublime\ Text\ 2.0.1\ x64.tar.bz2</code></p>

<p>You’ll get a “Sublime Text 2″ folder after extraction. This folder contains all the files that Sublime Text will need. Then I moved it to “/opt/” folder :
<code>mv Sublime\ Text\ 2 /opt/</code></p>

<p>To be able to use it from a terminal with “sublime”. For that just create a symbolic link in “/usr/bin” :
<code>ln -s /opt/Sublime\ Text\ 2/sublime_text /usr/bin/sublime</code></p>

<h4>Redis</h4>

<p>Just download the 64-bit verion
<a href="http://download.redis.io/redis-stable.tar.gz">here</a> with
<code>wget http://download.redis.io/redis-stable.tar.gz</code> there is also a online guide
<a href="http://redis.io/topics/quickstart">here</a> to unpack use
<code>tar xvzf redis-stable.tar.gz</code> change directory and comåile with <code>make</code>
Do not forget to run <code>make test</code> after, to install run <code>make install</code> this will just copy the binary files
so that you can start Redis then needed. To install it as service check the file README</p>

<h4>NodeJS</h4>

<p>This is a Javascript runtime that is needed to run various rails applications, I added the debian repository
in <code>/etc/apt/sources.list</code> just add this line :
<code>add deb http://ftp.de.debian.org/debian sid main</code>
and run the following commands <code>apt-get update</code> followed by <code>apt-get install nodejs</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse shell]]></title>
    <link href="http://chrjoh.github.io/blog/2014/05/20/reverse-shell/"/>
    <updated>2014-05-20T20:22:22+02:00</updated>
    <id>http://chrjoh.github.io/blog/2014/05/20/reverse-shell</id>
    <content type="html"><![CDATA[<h1>reverse_shell</h1>

<p>My first attempt was to write a reverse shell to be used in Mac OSX 64-bit system, one of the first obstacles was to find the header file
with the id for syscalls. After some google I found an excellent page with them
<a href="http://www.opensource.apple.com/source/xnu/xnu-1504.3.12/bsd/kern/syscalls.master" title="syscalls">here</a>. The first steep was to write some
c code that did the same job and from that deduce the correct order of the syscalls. This resulted in the file reverse_shell.s,
and keep in mind that in 64-bit the calls need to be in the form, <code>0x2000061</code> for the syscall <code>61</code>. The complete code for
<a href="https://github.com/chrjoh/shell_code/blob/master/reverse_shell/reverse_shell.s" title="reverse_shell.s">reverse_shell.s</a>.
The <a href="http://cocoafactory.com/blog/2012/11/23/x86-64-assembly-language-tutorial-part-1/">page</a>
have a good description of the registers and the naming it also include a tutorial to assembly programming. The first order of business
is to change from the nasm that apple supply, go to
<a href="http://www.nasm.us/pub/nasm/releasebuilds/2.11.02/macosx/">nasm download osx</a> and download the macox version.</p>

<h4>reverse_shell, Usage:</h4>

<p>  Program that call out to a service that is listening to port 4444, the ip is set to any for simplicity.
  It is written for mac osx 64 bit</p>

<p>  Start a listening server with the command: <code>nc -l 4444</code> in another folder for example your home directory</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  nasm -g -f macho64 reverse_shell.s
</span><span class='line'>  ld  -arch x86_64 -macosx_version_min 10.7.0 -lSystem -o reverse_shell reverse_shell.o
</span><span class='line'>  ./reverse_shell</span></code></pre></td></tr></table></div></figure>


<p>
To use the code as a string payload, one need to remove the NULL bytes, these can be found by running: otool -lV reverse_shell and identify
the mov instructions that need to be modified. The reason are the numerous NULL bytes (\x00).
Most buffer overflow errors are related to C stdlib string functions: strcpy(), sprintf(), strcat(),
and so on. All of these functions use the NULL symbol to indicate the end of a string.
Therefore, a function will not read shellcode after the first occurring NULL byte.
There are other delimiters like linefeed (0x0A), carriage return (0x0D), 0xFF, and others.</p>

<h4>Binary to string</h4>

<p>To convert the binary to string values that can be used as a payload use</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  gobjdump -d ./$1|grep '[0-9a-f]:'|grep -v 'file'|cut -f2 -d:|cut -f1-6 -d' '|tr -s ' '|tr '\t' ' '|sed 's/ $//g'|sed 's/ /\\x/g' &gt; dump.txt</span></code></pre></td></tr></table></div></figure>


<p>  By inspecting this file, we see quite few NULL(0x00) and these has to be removed
  A simple <code>paste -d'\0' -s dump.txt</code> will combine all rows into one that can then be copied into the C file.
  Ànother way to find bad values is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> gobjdump -D reverse_shell -M intel |grep 00</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>By using the above and to find the problematic instructions and that most of them include the <code>mov</code> instruction and that the data we move
is stored in the lowest byte of the 64-bit registers. We can use <code>mov dil, 2</code> instead of <code>mov rdi, 2</code>. Using this and that we can construct
the syscall setuid <code>mov rax, 0x2000017</code> by using the following instructions</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> mov r8b, 0x02               ; unix class system calls = 2
</span><span class='line'> shl r8, 24                  ; shift left 24 to the upper order bits
</span><span class='line'> or r8, 0x17                 ; setreuid is 0x17
</span><span class='line'> mov rax, r8                 ; put setreuid syscall # into rax</span></code></pre></td></tr></table></div></figure>


<p>The last part is now to get rid of the NULL terminated string <code>db '/bin/sh', 0</code> this we do by using a simple ruby command
(remember that osx is little endian)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  "/bin//sh".unpack('H*')
</span><span class='line'>  =&gt; ["2f62696e2f2f7368"] and that give us the value to use as: 0x68732f2f6e69622f</span></code></pre></td></tr></table></div></figure>


<p>The result of doing these manipulations can be found in
<a href="https://github.com/chrjoh/shell_code/blob/master/reverse_shell/reverse_shell_no_bad_values.s" title="reverse_shell_no_bad_values.s">reverse_shell_no_bad_values.s</a>
A more simple command to use is the osx otool, <code>otool -t reverse_shell_no_bad_values.o</code> to generate the hex values we need to be able to
test our reverse_shell code in a simple c-program,
<a href="https://github.com/chrjoh/shell_code/blob/master/reverse_shell/reverse_shell_test.c" title="reverse_shell_test.c">reverse_shell_test.c</a>.
Start your netcat server <code>nc -l 4444</code> then run the c code and it should call out to you can check that it works by doing some normal
shell commands. To simplify the compilation you can use the supplied Makefile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First post]]></title>
    <link href="http://chrjoh.github.io/blog/2014/05/20/first-post/"/>
    <updated>2014-05-20T20:01:11+02:00</updated>
    <id>http://chrjoh.github.io/blog/2014/05/20/first-post</id>
    <content type="html"><![CDATA[<p>This is the first post using octopress, started the blog to document my path into shell code programming and other security related.
Will try to describe my progress and difficulties I encounter during the way, maybe include some standard programs, like how to develop
a module for nginx(found that there is not an abundance of information about that). Other interests is developing in ruby on rails so will
try to include something about that to.</p>
]]></content>
  </entry>
  
</feed>
